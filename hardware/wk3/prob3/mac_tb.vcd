$date
	Sat Oct 26 13:07:02 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mac_tb $end
$var wire 16 ! out [15:0] $end
$var reg 4 " a [3:0] $end
$var reg 4 # b [3:0] $end
$var reg 16 $ c [15:0] $end
$var reg 1 % clk $end
$var reg 16 & expected_out [15:0] $end
$var integer 32 ' i [31:0] $end
$var integer 32 ( w_dec [31:0] $end
$var integer 32 ) w_file [31:0] $end
$var integer 32 * w_scan_file [31:0] $end
$var integer 32 + x_dec [31:0] $end
$var integer 32 , x_file [31:0] $end
$var integer 32 - x_scan_file [31:0] $end
$scope function mac_predicted $end
$var reg 4 . a [3:0] $end
$var reg 16 / a_unsigned [15:0] $end
$var reg 4 0 b [3:0] $end
$var reg 16 1 b_signed [15:0] $end
$var reg 16 2 c [15:0] $end
$var reg 16 3 mac_predicted [15:0] $end
$var reg 16 4 product [15:0] $end
$upscope $end
$scope function w_bin $end
$var reg 4 5 w_bin [3:0] $end
$var integer 32 6 weight [31:0] $end
$upscope $end
$scope function x_bin $end
$var reg 4 7 x_bin [3:0] $end
$var integer 32 8 x [31:0] $end
$upscope $end
$scope module mac_wrapper_instance $end
$var wire 4 9 a [3:0] $end
$var wire 4 : b [3:0] $end
$var wire 16 ; c [15:0] $end
$var wire 1 % clk $end
$var wire 16 < out [15:0] $end
$var reg 4 = a_q [3:0] $end
$var reg 4 > b_q [3:0] $end
$var reg 16 ? c_q [15:0] $end
$scope module mac_instance $end
$var wire 4 @ a [3:0] $end
$var wire 4 A b [3:0] $end
$var wire 16 B c [15:0] $end
$var wire 16 C product [15:0] $end
$var wire 16 D out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b10000000000000000000000000000100 ,
bx +
bx *
b10000000000000000000000000000011 )
bx (
bx '
b0 &
0%
bx $
bx #
bx "
bx !
$end
#2
1%
#3
b0 '
0%
#4
1%
#5
b1 '
b110 &
b110 3
b110 4
b1 1
b110 /
b110 .
b1 0
b0 2
b0 $
b0 ;
b1 #
b1 :
b1 5
b1 6
b110 "
b110 9
b110 7
b0 8
b1 -
b110 +
b1 *
b1 (
0%
#6
b110 !
b110 <
b110 D
b0 ?
b0 B
b110 C
b110 =
b110 @
b1 >
b1 A
1%
#7
b10 '
b1111111111010101 &
b1111111111010101 3
b1111111111001111 4
b1111111111111001 1
b111 /
b111 .
b1001 0
b110 2
b110 $
b110 ;
b1001 #
b1001 :
b1001 5
b1 6
b111 "
b111 9
b111 7
b1 8
b111 +
b11111111111111111111111111111001 (
0%
#8
b110 ?
b110 B
b111 =
b111 @
b1111111111010101 !
b1111111111010101 <
b1111111111010101 D
b1111111111001111 C
b1001 >
b1001 A
1%
#9
b11 '
b1111111111011100 &
b1111111111011100 3
b111 4
b111 1
b1 /
b1 .
b111 0
b1111111111010101 2
b1111111111010101 $
b1111111111010101 ;
b111 #
b111 :
b111 5
b1 6
b1 "
b1 9
b1 7
b1 +
b111 (
0%
#10
b1111111111010101 ?
b1111111111010101 B
b1 =
b1 @
b1111111111011100 !
b1111111111011100 <
b1111111111011100 D
b111 C
b111 >
b111 A
1%
#11
b100 '
b1111111111010000 &
b1111111111010000 3
b1111111111110100 4
b1111111111111100 1
b11 /
b11 .
b1100 0
b1111111111011100 2
b1111111111011100 $
b1111111111011100 ;
b1100 #
b1100 :
b1100 5
b0 6
b11 "
b11 9
b11 7
b1 8
b11 +
b11111111111111111111111111111100 (
0%
#12
b1111111111011100 ?
b1111111111011100 B
b11 =
b11 @
b1111111111010000 !
b1111111111010000 <
b1111111111010000 D
b1111111111110100 C
b1100 >
b1100 A
1%
#13
b101 '
b1111111111001010 &
b1111111111001010 3
b1111111111111010 4
b1111111111111101 1
b10 /
b10 .
b1101 0
b1111111111010000 2
b1111111111010000 $
b1111111111010000 ;
b1101 #
b1101 :
b1101 5
b1 6
b10 "
b10 9
b10 7
b0 8
b10 +
b11111111111111111111111111111101 (
0%
#14
b1111111111010000 ?
b1111111111010000 B
b10 =
b10 @
b1111111111001010 !
b1111111111001010 <
b1111111111001010 D
b1111111111111010 C
b1101 >
b1101 A
1%
#15
b110 '
b1111111111000110 &
b1111111111000110 3
b1111111111111100 4
b1111111111111110 1
b1110 0
b1111111111001010 2
b1111111111001010 $
b1111111111001010 ;
b1110 #
b1110 :
b1110 5
b0 6
b0 8
b11111111111111111111111111111110 (
0%
#16
b1111111111001010 ?
b1111111111001010 B
b1111111111000110 !
b1111111111000110 <
b1111111111000110 D
b1111111111111100 C
b1110 >
b1110 A
1%
#17
b111 '
b1111111110001010 &
b1111111110001010 3
b1111111111000100 4
b1111111111111100 1
b1111 /
b1111 .
b1100 0
b1111111111000110 2
b1111111111000110 $
b1111111111000110 ;
b1100 #
b1100 :
b1100 5
b0 6
b1111 "
b1111 9
b1111 7
b1 8
b1111 +
b11111111111111111111111111111100 (
0%
#18
b1111111111000110 ?
b1111111111000110 B
b1111 =
b1111 @
b1111111111001010 !
b1111111111001010 <
b1111111111001010 D
b100 C
b1100 >
b1100 A
1%
#19
b1000 '
b1111111110011110 &
b1111111110011110 3
b10100 4
b101 1
b100 /
b100 .
b101 0
b1111111110001010 2
b1111111110001010 $
b1111111110001010 ;
b101 #
b101 :
b101 5
b1 6
b100 "
b100 9
b100 7
b0 8
b100 +
b101 (
0%
#20
b1111111110001010 ?
b1111111110001010 B
b100 =
b100 @
b1111111110011110 !
b1111111110011110 <
b1111111110011110 D
b10100 C
b101 >
b101 A
1%
#21
b1001 '
b1111111101111010 &
b1111111101111010 3
b1111111111011100 4
b1111111111111010 1
b110 /
b110 .
b1010 0
b1111111110011110 2
b1111111110011110 $
b1111111110011110 ;
b1010 #
b1010 :
b1010 5
b0 6
b110 "
b110 9
b110 7
b0 8
b110 +
b11111111111111111111111111111010 (
0%
#22
b1111111110011110 ?
b1111111110011110 B
b110 =
b110 @
b1111111101111010 !
b1111111101111010 <
b1111111101111010 D
b1111111111011100 C
b1010 >
b1010 A
1%
#23
b1010 '
b1111111110001010 &
b1111111110001010 3
b10000 4
b100 1
b100 /
b100 .
b100 0
b1111111101111010 2
b1111111101111010 $
b1111111101111010 ;
b100 #
b100 :
b100 5
b0 6
b100 "
b100 9
b100 7
b0 8
b100 +
b100 (
0%
#24
b1111111101111010 ?
b1111111101111010 B
b100 =
b100 @
b1111111110001010 !
b1111111110001010 <
b1111111110001010 D
b10000 C
b100 >
b100 A
1%
#25
0%
#35
